name: PR Unit Test Eval

on:
  workflow_run:
    workflows: ["unit tests"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  triage:
    runs-on: self-hosted
    steps:
      - name: Label/assign based on test outcome for PRs to 'development'
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const { conclusion, head_sha: headSha } = run;
            const { owner, repo } = context.repo;

            // Find PR(s) associated with this commit
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner, repo, commit_sha: headSha
            });

            if (!prs || prs.length === 0) {
              console.log('No PR found for head_sha:', headSha);
              return;
            }

            // Only act on PRs targeting 'development'
            const targetPRs = prs.filter(pr => pr.base?.ref === 'development');
            if (targetPRs.length === 0) {
              console.log("Found PRs, but none target 'development'. Skipping.");
              return;
            }

            async function safeRemoveLabel(issue_number, name) {
              try {
                await github.rest.issues.removeLabel({ owner, repo, issue_number, name });
              } catch (e) {
                if (e.status !== 404) console.log(`removeLabel(${name}) error:`, e.message);
              }
            }

            for (const pr of targetPRs) {
              const issue_number = pr.number;
              const author = pr.user.login;

              if (conclusion === 'success') {
                await github.rest.issues.addLabels({
                  owner, repo, issue_number, labels: ['ready for review']
                });
                await safeRemoveLabel(issue_number, 'requires updates');

              } else if (conclusion === 'failure') {
                await github.rest.issues.addLabels({
                  owner, repo, issue_number, labels: ['requires updates']
                });
                await safeRemoveLabel(issue_number, 'ready for review');

                try {
                  await github.rest.issues.addAssignees({
                    owner, repo, issue_number, assignees: [author]
                  });
                } catch (e) {
                  console.log('Could not assign author (likely not a collaborator):', e.message);
                }
              } else {
                console.log(`Workflow conclusion "${conclusion}" â€” no triage changes.`);
              }
            }