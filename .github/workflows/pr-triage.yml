name: PR Unit Test Eval

on:
  workflow_run:
    workflows: [ unit tests ]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Label/assign based on unit test outcome for PRs to 'main'
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const { conclusion, head_sha: headSha, name: workflowName, event } = run;
            const { owner, repo } = context.repo;

            core.info(`Workflow "${workflowName}" finished with conclusion="${conclusion}", event="${event}", headSha=${headSha}`);

            // Find PR(s) associated with this commit
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: headSha
            });

            if (!prs || prs.length === 0)
            {
              core.info(`No PR found for head_sha: ${headSha}. Nothing to do.`);
              return;
            }

            // Only act on PRs targeting 'main'
            const targetPRs = prs.filter(pr => pr.base?.ref === 'main');
            if (targetPRs.length === 0)
            {
              core.info(`Found ${prs.length} PR(s), but none target 'main'. Skipping.`);
              return;
            }

            // Helper: remove label if present, ignore 404
            async function safeRemoveLabel(issue_number, name)
            {
              try
              {
                await github.rest.issues.removeLabel({ owner, repo, issue_number, name });
              }
              catch (e)
              {
                if (e.status !== 404)
                {
                  core.warning(`removeLabel("${name}") error on #${issue_number}: ${e.message}`);
                }
              }
            }

            const isSuccess = conclusion === 'success';

            for (const pr of targetPRs)
            {
              const issue_number = pr.number;
              const author = pr.user.login;

              core.info(`Triage PR #${issue_number} (base=${pr.base?.ref}, author=${author})`);

              if (isSuccess)
              {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number,
                  labels: ['ready for review']
                });

                await safeRemoveLabel(issue_number, 'requires updates');
                core.info(`Labeled #${issue_number} → "ready for review"`);
              }
              else
              {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number,
                  labels: ['requires updates']
                });

                await safeRemoveLabel(issue_number, 'ready for review');
                core.info(`Labeled #${issue_number} → "requires updates"`);

                try
                {
                  await github.rest.issues.addAssignees({
                    owner,
                    repo,
                    issue_number,
                    assignees: [author]
                  });

                  core.info(`Assigned #${issue_number} to @${author}`);
                }
                catch (e)
                {
                  core.warning(`Could not assign @${author} to #${issue_number} (likely not a collaborator): ${e.message}`);
                }
              }
            }
